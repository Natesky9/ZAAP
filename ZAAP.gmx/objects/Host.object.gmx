<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = -1
bin = buffer_create(1024,buffer_fixed,1)
bout = buffer_create(1024,buffer_fixed,1)
playerlist = ds_list_create()
playerobjects = ds_map_create()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server)
buffer_delete(bin)
buffer_delete(bout)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_shift)
    {
    seek(bout)
    buffer_write(bout,buffer_u8,1);
    buffer_write(bout,buffer_u32,current_time);
    network_send_packet(client_socket,bout,buffer_tell(bout));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp,2244,8)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var event = ds_map_find_value(async_load,"type")
var sss,player
switch (event)
    {
//-----------------------------------//
    case network_type_connect:
        {
        sss = ds_map_find_value(async_load,"socket")
        ds_list_add(playerlist,sss)
        player = instance_create(128,128,Player)
        player.sss = sss
        
        //get grid
        var get_grid = ds_grid_create(3,3)
        ds_grid_clear(get_grid,1)
        ds_grid_set(get_grid,1,1,2)
        ds_grid_set(get_grid,0,0,2)
        ds_grid_set(get_grid,2,0,2)
        //
        player.grid = get_grid
        with player Draw_V_Buffer()
        ds_map_add(playerobjects,sss,player)
        Packet_4(sss)
        Packet_5(sss)
        Packet_6(sss)
        Packet_14(sss,get_grid)
        Packet_15(sss)
        Packet_16(sss,get_grid)
        
        break
        }
//-----------------------------------//
    case network_type_disconnect:
        {
        sss = ds_map_find_value(async_load,"socket")
        var findsocket = ds_list_find_index(playerlist,sss)
        ds_list_delete(playerlist,findsocket)
        
        if findsocket &gt;= 0
            {
            Socket_7(sss)
            with (ds_map_find_value(playerobjects,sss))
            instance_destroy()
            ds_map_delete(playerobjects,sss)
            }
        break
        }
//-----------------------------------//
    case network_type_data:
        {
        bin = ds_map_find_value(async_load,"buffer")
        sss = ds_map_find_value(async_load,"id")
        seek(bin)
        Packet_Get_Host(sss)
        break
        }
//-----------------------------------//
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_text(0,0,"Server Status: " + string(server &gt;= 0))
draw_text(0,16,"Total Clients: " + string(ds_list_size(playerlist)))

draw_sprite(sprite1,0,x,y)

for (i = 0;i &lt; ds_list_size(playerlist); i += 1)
    {
    var p = ds_list_find_value(playerlist,i)
    draw_text(0,64+16*i,"Player "+string(i)+": "+ string(p))
    var po = ds_map_find_value(playerobjects,p)
    var px = po.x
    var py = po.y
    draw_set_color(c_white)
    draw_line(64,64+16*i,px,py)
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
